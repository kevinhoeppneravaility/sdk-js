(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{111:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),c=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=c(n),b=r,m=d["".concat(i,".").concat(b)]||d[b]||u[b]||a;return n?o.a.createElement(m,l(l({ref:t},s),{},{components:n})):o.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var r=n(3),o=n(7),a=(n(0),n(111)),i=["components"],l={title:"Creating a Proxy"},p={unversionedId:"recipes/proxy",id:"recipes/proxy",isDocsHomePage:!1,title:"Creating a Proxy",description:"When calling out to external APIs, the portal doesn't allow traffic to come from anywhere by default. Our proxy service will map a route on our end to an external route configured by an administrator. Once that has been setup you can then begin to use the avProxyApi to fetch data from the external route.",source:"@site/docs/recipes/proxy.md",slug:"/recipes/proxy",permalink:"/sdk-js/recipes/proxy",editUrl:"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/recipes/proxy.md",version:"current",sidebar:"someSidebar",previous:{title:"Uploads",permalink:"/sdk-js/api/uploads"},next:{title:"Making an HTTP Request",permalink:"/sdk-js/recipes/httpRequest"}},s=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Example",id:"example",children:[{value:"Adding API Code Snippet",id:"adding-api-code-snippet",children:[]},{value:"Adding a new Route",id:"adding-a-new-route",children:[]},{value:"Adding Response Data",id:"adding-response-data",children:[]}]}],c={toc:s};function d(e){var t=e.components,n=Object(o.a)(e,i);return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"When calling out to external APIs, the portal doesn't allow traffic to come from anywhere by default. Our proxy service will map a route on our end to an external route configured by an administrator. Once that has been setup you can then begin to use the ",Object(a.b)("inlineCode",{parentName:"p"},"avProxyApi")," to fetch data from the external route."),Object(a.b)("h2",{id:"getting-started"},"Getting Started"),Object(a.b)("p",null,"Most of this process is already documented ",Object(a.b)("a",{parentName:"p",href:"https://availity.github.io/availity-workflow/tutorial/mocks/"},"here"),", but we will do a light explanation. In the link provided you will find: how to set up your project, learn about routes for mock/proxy data, and what your terminal should look like when the server is running. Basically everything you need to know to get at least halfway out the door you will find there."),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("p",null,"We are going to clear out the ",Object(a.b)("inlineCode",{parentName:"p"},"App.js")," file for tesing purposes and instead paste the below code snippet."),Object(a.b)("h3",{id:"adding-api-code-snippet"},"Adding API Code Snippet"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"import React, { useEffect, useState } from 'react';\nimport { AvProxyApi } from '@availity/api-axios';\n\nconst proxyApi = new AvProxyApi({ tenant: 'availity', name: '/my/proxy' });\n\nconst App = () => {\n  const [climbingHolds, setClimbingHolds] = useState([]); // initialize state\n\n  const fetchData = async () => {\n    const response = await proxyApi.query({ sessionBust: false });\n    setClimbingHolds(response.data.climbingHolds);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {climbingHolds.map((hold) => {\n        return <li key={hold.name}>{hold.name}</li>;\n      })}\n    </div>\n  );\n};\n\nexport default App;\n")),Object(a.b)("p",null,"The above code snippet runs a method called ",Object(a.b)("inlineCode",{parentName:"p"},"fetchData")," on mount that will fetch the response from ",Object(a.b)("inlineCode",{parentName:"p"},"AvProxyApi"),"."),Object(a.b)("p",null,"Since we know the route is going go to ",Object(a.b)("inlineCode",{parentName:"p"},"api/sdk/platform/v1/users/me")," we need to add our proxy route in the ",Object(a.b)("inlineCode",{parentName:"p"},"routes.json")," by adding the following to our file:"),Object(a.b)("h3",{id:"adding-a-new-route"},"Adding a new Route"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json",metastring:"header=routes.json",header:"routes.json"},'{\n  "ms/api/availity/internal/spc/slotmachine/graphql": {\n    "file": "slotmachine.json"\n  },\n  "v1/proxy/availity/my/proxy": {\n    "file": "climbingholds.json"\n  }\n}\n')),Object(a.b)("p",null,"All proxy routes will begin with ",Object(a.b)("inlineCode",{parentName:"p"},"v1/proxy/"),". You will complete the route with the ",Object(a.b)("inlineCode",{parentName:"p"},"tenant")," and ",Object(a.b)("inlineCode",{parentName:"p"},"name")," you supplied when creating a new instance of AvProxyApi. In this case ",Object(a.b)("inlineCode",{parentName:"p"},"tenant")," would be ",Object(a.b)("inlineCode",{parentName:"p"},"availity")," and the ",Object(a.b)("inlineCode",{parentName:"p"},"name")," would be ",Object(a.b)("inlineCode",{parentName:"p"},"/my/proxy")," ."),Object(a.b)("h3",{id:"adding-response-data"},"Adding Response Data"),Object(a.b)("p",null,"Now that we have the route we need to test out our ",Object(a.b)("inlineCode",{parentName:"p"},"climbingholds.json")," response:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json",metastring:"header=climbingholds.json",header:"climbingholds.json"},'{\n  "totalCount": 1,\n  "page": 1,\n  "perPage": 50,\n  "climbingHolds": [\n    {\n      "name": "Jug"\n    },\n    {\n      "name": "Pinch"\n    },\n    {\n      "name": "Crimp"\n    }\n  ]\n}\n')),Object(a.b)("p",null,"While the response we added was not simple, it is more indicative of a real response."),Object(a.b)("p",null,"If you your application is currently running you will need to restart it as the proxy server will need to be restarted in order to get the updated proxy data."),Object(a.b)("p",null,"To determine if your proxy is working correctly, open your browser to ",Object(a.b)("inlineCode",{parentName:"p"},"localhost:3000")," . Right click in the browser and select 'Inspect'. Navigate to the network tab and you should see your proxy response."),Object(a.b)("p",null,"The climbing hold list should be rendered on the screen."),Object(a.b)("img",{width:"100%",src:"browser-response.png",alt:"Browser Response"}),Object(a.b)("p",null,"You should also see this in your terminal"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"GET /v1/proxy/availity/my/proxy 200 climbingholds.json\n")))}d.isMDXComponent=!0}}]);